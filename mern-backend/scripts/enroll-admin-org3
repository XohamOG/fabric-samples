const { Wallets } = require('fabric-network');
const fs = require('fs');
const path = require('path');

async function enrollAdminOrg3() {
    try {
        // Define Org3 wallet path
        const walletPath = path.join(__dirname, '../wallets/org3-wallet');
        const wallet = await Wallets.newFileSystemWallet(walletPath);

        // Check if admin identity already exists in the wallet
        const adminExists = await wallet.get('admin');
        if (adminExists) {
            console.log('Admin identity already exists in the wallet');
            return;
        }

        // Load the manually generated certificate and private key for Org3
        const certPath = path.join(__dirname, './wallets/org3-wallet/msp/signcerts/admin-cert.pem');
        const keyPath = path.join(__dirname, './wallets/org3-wallet/msp/keystore/admin-key.pem');
        const certificate = fs.readFileSync(certPath, 'utf8');
        const privateKey = fs.readFileSync(keyPath, 'utf8');

        // Create the admin identity for Org3
        const x509Identity = {
            credentials: {
                certificate: certificate,
                privateKey: privateKey,
            },
            mspId: 'Org3MSP',
            type: 'X.509',
        };

        // Add the admin identity to the wallet
        await wallet.put('admin', x509Identity);
        console.log('Successfully enrolled admin user for Org3 and imported it into the wallet');
    } catch (error) {
        console.error(`Failed to register and enroll admin user for Org3: ${error}`);
        process.exit(1);
    }
}

enrollAdminOrg3();
